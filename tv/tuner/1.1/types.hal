/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.tv.tuner@1.1;

import @1.0::Constant;
import @1.0::DemuxFilterDownloadEvent;
import @1.0::DemuxFilterIpPayloadEvent;
import @1.0::DemuxFilterMediaEvent;
import @1.0::DemuxFilterMmtpRecordEvent;
import @1.0::DemuxFilterPesEvent;
import @1.0::DemuxFilterSectionEvent;
import @1.0::DemuxFilterTemiEvent;
import @1.0::DemuxFilterTsRecordEvent;
import android.hidl.safe_union@1.0;

@export
enum Constant : @1.0::Constant {
    /**
     * An invalid mpuSequenceNumber in DemuxFilterMmtpRecordEvent.
     */
    INVALID_MMTP_RECORD_EVENT_MPT_SEQUENCE_NUM = 0xFFFFFFFF,
};

@export
enum Constant64Bit : uint64_t {
    /**
     * An invalid 64-bit Filter ID.
     */
    INVALID_FILTER_ID_64BIT = 0xFFFFFFFFFFFFFFFF,
    /**
     * An invalid 64-bit AV sync hardware ID.
     */
    INVALID_AV_SYNC_ID_64BIT = 0xFFFFFFFFFFFFFFFF,
    /**
     * An invalid pts in the DemuxFilterTsRecordEvent or DemuxFilterMmtpRecordEvent.
     */
    INVALID_PRESENTATION_TIME_STAMP = 0xFFFFFFFFFFFFFFFF,
};

/**
 * Filter Event for TS Record data.
 */
struct DemuxFilterTsRecordEvent {
    /**
     * V1_0 Filter Event for TS Record data.
     */
    @1.0::DemuxFilterTsRecordEvent tsRecordEvent_1_0;

    /**
     * The Presentation Time Stamp(PTS) for the audio or video frame. It is based on 90KHz
     * and has the same format as the PTS in ISO/IEC 13818-1. It is used only for the SC and
     * the SC_HEVC.
     */
    uint64_t pts;
};

/**
 * Filter Event for MMTP Record data.
 */
struct DemuxFilterMmtpRecordEvent {
    /**
     * V1_0 Filter Event for MMTP Record data.
     */
    @1.0::DemuxFilterMmtpRecordEvent mmtpRecordEvent_1_0;

    /**
     * MPU sequence number of the filtered data. This is only used for MMTP.
     */
    uint32_t mpuSequenceNumber;

    /**
     * The Presentation Time Stamp(PTS) for the audio or video frame. It is based on 90KHz
     * and has the same format as the PTS in ISO/IEC 13818-1. It is used only for the SC and
     * the SC_HEVC.
     */
    uint64_t pts;
};

/**
 * Filter Event.
 */
struct DemuxFilterEvent {
    safe_union Event {
        DemuxFilterSectionEvent section;

        DemuxFilterMediaEvent media;

        DemuxFilterPesEvent pes;

        @1.1::DemuxFilterTsRecordEvent tsRecord;

        @1.1::DemuxFilterMmtpRecordEvent mmtpRecord;

        DemuxFilterDownloadEvent download;

        DemuxFilterIpPayloadEvent ipPayload;

        DemuxFilterTemiEvent temi;
    };

    /**
     * An array of events
     */
    vec<Event> events;
};
